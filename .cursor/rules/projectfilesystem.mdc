---
description: 
globs: 
alwaysApply: true
---
Crucial Project Filesystem Rules ‚Äî Reference for every Cursor prompt

#	Path	Type	Purpose / What must live here
1	/ (project root)	dir	Package.json, Next config, .env.*, local_db/ JSON store, scripts/ (seeders, migrations), Git artefacts, core documentation.
2	/ARCHITECTURE.md	file	System architecture, tech stack, design patterns. Core reference document.
3	/DEVELOPMENT.md	file	Development workflow, scripts, best practices. Developer guide.
4	/AUTHENTICATION.md	file	Firebase Auth setup, user roles, security implementation.
5	/PROJECT_REFERENCE.md	file	Central navigation hub to all documentation. Quick reference and status.
6	/LOGIN_CREDENTIALS.md	file	Development login credentials and test user accounts.
7	/local_db	dir	Flat-file "database" ‚Äî seeded JSON collections (users.json, patients.json, ‚Ä¶). Never commit PII; always in .gitignore.
8	/scripts	dir	All Node/TS CLI helpers (e.g. seedLocalDb.ts, migration tools). Invoked via npm run *.
9	/docs	dir	Specialized documentation, organized by topic:
‚îî‚îÄ /docs/API_REFERENCE.md	file	API endpoints, schemas, validation rules.
‚îî‚îÄ /docs/DEPLOYMENT.md	file	Firebase deployment procedures and configuration.
‚îî‚îÄ /docs/ERROR_HANDLING.md	file	Error system and troubleshooting guides.
‚îî‚îÄ /docs/TESTING.md	file	Testing strategies and validation tools.
‚îî‚îÄ /docs/UI_COMPONENTS.md	file	Component library and styling guidelines.
‚îî‚îÄ /docs/history/	dir	Historical records and logs:
  ‚îî‚îÄ PROMPT_COMPLETION_LOG.md	file	Detailed prompt completion history.
  ‚îî‚îÄ MIGRATION_HISTORY.md	file	Database migrations and Firebase setup.
  ‚îî‚îÄ BUG_FIXES.md	file	Bug resolution history.
  ‚îî‚îÄ FEATURE_DEVELOPMENT.md	file	Feature implementation timeline.
10	/src	dir	All application TS/TSX source code (no stray files outside).
11	/src/app	dir	Next-js App-Router tree only‚Äîno helpers or utils. Route groups:
‚îî‚îÄ (public)	dir	Marketing pages (home, about, contact, find-doctors).
‚îî‚îÄ (auth)	dir	Auth flow pages (login, register/*, forgot-password, ‚Ä¶).
‚îî‚îÄ (platform)	dir	All authenticated areas.
- sub-layout patient, doctor, admin, notifications, book-appointment.
‚îî‚îÄ (dev)	dir	Dev-only UI (ui-test, cms/validation). Will be stripped in prod build.
‚îî‚îÄ not-found.tsx	file	Global 404 fallback.
12	/src/components/ui	dir	Atomic, theme-aware primitives only (Button, Card, Input, Spinner, Alert, Badge, ‚Ä¶). No business logic.
13	/src/components/layout	dir	Structural components used site-wide (Navbar, Footer, Layout wrapper).
14	/src/components/auth	dir	Auth helpers visible to UI (e.g. Protected.tsx).
15	/src/context	dir	React context providers only (ThemeContext.tsx, AuthContext.tsx). Each must export its own useX hook.
16	/src/hooks	dir	Reusable client hooks (e.g. TanStack Query wrappers). No UI markup.
17	/src/lib	dir	Pure logic / node-safe utilities.
‚Ä¢ logger.ts, performance.ts
‚Ä¢ localDb.ts (low-level JSON R/W)
‚Ä¢ localApiFunctions.ts (Phase-4 local backend stubs)
‚Ä¢ apiClient.ts (flag-switch wrapper for local ‚ÜîÔ∏è emulator)
18	/src/data	dir	High-level data-loader modules (patientLoaders.ts, doctorLoaders.ts, ‚Ä¶). These call apiClient.
19	/src/types	dir	Project-wide types only:
‚Ä¢ enums.ts (UserType, AppointmentStatus ‚Ä¶)
‚Ä¢ schemas.ts (Zod)
‚Ä¢ index.ts (re-exports & inferred types).
20	/src/styles	dir	Tailwind base files (globals.css, tailwind.config.ts, etc.). No CSS Modules here.
21	/src/firebase_backend/functions	dir	Firebase Cloud Functions backend code:
‚Ä¢ package.json, tsconfig.json (Functions-specific config)
‚Ä¢ src/index.ts (Functions entry point)
‚Ä¢ src/config/ (Firebase Admin SDK setup)
‚Ä¢ src/shared/ (Shared utilities, schemas)
‚Ä¢ src/user/, src/patient/, src/doctor/, src/appointment/, src/notification/, src/admin/ (Domain-specific functions)
22	/public/	dir	Static assets (favicons, images); automatically served by Next.
23	/README.md	file	Project overview, quick start guide, basic setup instructions.

üîë Enforcement Rules

Documentation Structure:
‚Ä¢ Core documentation (ARCHITECTURE.md, DEVELOPMENT.md, AUTHENTICATION.md, PROJECT_REFERENCE.md) lives in project root for easy access.
‚Ä¢ Specialized documentation lives in /docs/ organized by topic.
‚Ä¢ Historical records and logs live in /docs/history/ for archival purposes.
‚Ä¢ PROJECT_REFERENCE.md serves as the central navigation hub to all other documentation.
‚Ä¢ Never duplicate documentation content across files; use cross-references instead.

Code Organization:
‚Ä¢ Never import from src/app into src/lib, context, or components/ui. (App-Router must stay top-level only).
‚Ä¢ No business logic in src/components/ui/*. They are presentation-only.
‚Ä¢ Every new file must be placed in the table-designated directory that matches its role. If uncertain, default to src/lib (logic) or src/components (UI) and update this rule set.
‚Ä¢ Do not place .env, DB JSON, or build artefacts inside src/.
‚Ä¢ All Cloud-Function look-alike names must exist in localApiFunctions.localApi and later in the Firebase functions index; the names must match 1-for-1.
‚Ä¢ All shared types live in src/types; UI must import them, never re-declare.

Data and Security:
‚Ä¢ local_db is the only place file-writes are permitted outside node_modules during dev.
‚Ä¢ Never commit PII or sensitive data; ensure proper .gitignore coverage.
‚Ä¢ Firebase Functions code lives in src/firebase_backend/functions with its own package.json and build system.

Documentation Maintenance:
‚Ä¢ Update PROJECT_REFERENCE.md when adding new major features or documentation.
‚Ä¢ Log significant changes in docs/history/PROMPT_COMPLETION_LOG.md.
‚Ä¢ Keep documentation current with code changes; outdated docs are worse than no docs.