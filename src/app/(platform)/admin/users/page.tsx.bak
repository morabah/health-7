'use client';

import React, { useState, useEffect, useRef, FormEvent, useCallback, useMemo } from 'react';
import Link from 'next/link';
import dynamic from 'next/dynamic';
import Card from '@/components/ui/Card';
import Button from '@/components/ui/Button';
import Input from '@/components/ui/Input';
import Select from '@/components/ui/Select';
import Badge from '@/components/ui/Badge';
import Spinner from '@/components/ui/Spinner';
import Alert from '@/components/ui/Alert';
import {
  UserPlus,
  Search,
  Eye,
  Pencil,
  RotateCw,
  Key,
  Trash2,
  CheckSquare,
  Filter,
  Download,
  Mail,
  ChevronDown,
  MoreVertical,
  Check,
  Ban,
  MessageSquare,
  AlertTriangle,
} from 'lucide-react';
import { useAllUsers, useAdminActivateUser } from '@/data/adminLoaders';
import { useToast } from '@/components/ui/use-toast';
import { useMediaQuery } from '@/hooks/useMediaQuery';
import { UserType, AccountStatus } from '@/types/enums';
import { formatDate, formatDateTime } from '@/lib/dateUtils';
import { logInfo, logValidation, logError } from '@/lib/logger';
import { trackPerformance } from '@/lib/performance';

// TypeScript interface for the API response
interface UsersApiResponse {
  success: boolean;
  users: User[];
  totalCount: number;
  error?: string;
}

// Define types for the user data
type User = {
  id: string;
  email: string | null;
  firstName: string;
  lastName: string;
  userType: UserType;
  isActive: boolean;
  emailVerified: boolean;
  phoneVerified: boolean;
  createdAt: string;
  updatedAt: string;
  phoneNumber?: string;
  address?: string;
  city?: string;
  state?: string;
  zipCode?: string;
  profilePictureUrl?: string | null;
  accountStatus: AccountStatus;
  lastLogin?: string | null;
};

interface UserRowProps {
  user: User;
  selectedUsers: string[];
  toggleSelectUser: (userId: string) => void;
  activeDropdown: string | null;
  setActiveDropdown: (userId: string | null) => void;
  handleStatusChange: (userId: string, status: AccountStatus) => void;
  isActionLoading: boolean;
}

// UserRow component for virtualized list
const UserRow = React.memo(({
  user,
  selectedUsers,
  toggleSelectUser,
  activeDropdown,
  setActiveDropdown,
  handleStatusChange,
  isActionLoading
}: UserRowProps) => {
  return (
    <div className="flex items-center w-full px-4 py-3 border-b border-slate-200 dark:border-slate-700 hover:bg-slate-50 dark:hover:bg-slate-800">
      <div className="w-8 flex-shrink-0">
        <input
          type="checkbox"
          className="rounded text-primary-600 focus:ring-primary-500"
          checked={selectedUsers.includes(user.id)}
          onChange={() => toggleSelectUser(user.id)}
          id={`user-${user.id}`}
        />
      </div>
      
      <div className="flex-grow flex items-center">
        <div className="w-1/4 font-medium text-slate-900 dark:text-white truncate">
          {user.firstName} {user.lastName}
        </div>
        
        <div className="w-1/4 text-slate-600 dark:text-slate-300 truncate">
          {user.email}
        </div>
        
        <div className="w-1/6">
          <Badge
            variant={
              user.userType === UserType.ADMIN
                ? 'warning'
                : user.userType === UserType.DOCTOR
                  ? 'success'
                  : 'primary'
            }
            className="capitalize"
          >
            {user.userType}
          </Badge>
        </div>
        
        <div className="w-1/6">
          <Badge
            variant={
              user.accountStatus === AccountStatus.ACTIVE
                ? 'success'
                : user.accountStatus === AccountStatus.SUSPENDED
                  ? 'warning'
                  : 'danger'
            }
            className="capitalize px-3 py-1 text-sm font-medium shadow-sm"
          >
            {user.accountStatus}
          </Badge>
        </div>
        
        <div className="w-1/6 text-sm text-slate-500 dark:text-slate-400">
          {user.lastLogin ? formatDateTime(user.lastLogin) : 'Never'}
        </div>
      </div>
      
      <div className="flex-shrink-0 flex items-center space-x-2">
        <div className="relative">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setActiveDropdown(activeDropdown === user.id ? null : user.id)}
            aria-label="User actions"
            className="rounded-full p-2"
            disabled={isActionLoading}
          >
            <MoreVertical className="h-4 w-4" />
          </Button>
          
          {activeDropdown === user.id && (
            <div className="absolute right-0 mt-2 w-48 bg-white dark:bg-slate-800 rounded-md shadow-lg z-10 border border-slate-200 dark:border-slate-700">
              <div className="py-1">
                <Link
                  href={`/admin/users/${user.id}`}
                  className="flex items-center px-4 py-2 text-sm text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700"
                >
                  <Eye className="h-4 w-4 mr-2" />
                  View Details
                </Link>
                
                {user.accountStatus !== AccountStatus.ACTIVE && (
                  <button
                    onClick={() => handleStatusChange(user.id, AccountStatus.ACTIVE)}
                    className="w-full flex items-center px-4 py-2 text-sm text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700"
                    disabled={isActionLoading}
                  >
                    <Check className="h-4 w-4 mr-2 text-green-500" />
                    Activate
                  </button>
                )}
                
                {user.accountStatus !== AccountStatus.SUSPENDED && (
                  <button
                    onClick={() => handleStatusChange(user.id, AccountStatus.SUSPENDED)}
                    className="w-full flex items-center px-4 py-2 text-sm text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700"
                    disabled={isActionLoading}
                  >
                    <AlertTriangle className="h-4 w-4 mr-2 text-amber-500" />
                    Suspend
                  </button>
                )}
                
                {user.accountStatus !== AccountStatus.DEACTIVATED && (
                  <button
                    onClick={() => handleStatusChange(user.id, AccountStatus.DEACTIVATED)}
                    className="w-full flex items-center px-4 py-2 text-sm text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700"
                    disabled={isActionLoading}
                  >
                    <Ban className="h-4 w-4 mr-2 text-red-500" />
                    Deactivate
                  </button>
                )}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
});

UserRow.displayName = 'UserRow';

// VirtualizedList component definition
interface VirtualizedListProps<T> {
  data: T[];
  height: number;
  itemHeight: number;
  renderRow: (props: { item: T; index: number }) => React.ReactNode;
}

function VirtualizedList<T>({
  data,
  height,
  itemHeight,
  renderRow,
}: VirtualizedListProps<T>) {
  return (
    <div className="overflow-y-auto" style={{ height }}>
      {data.map((item, index) => (
        <div key={index} style={{ height: itemHeight }}>
          {renderRow({ item, index })}
        </div>
      ))}
    </div>
  );
}

export default function AdminUsersPage() {
  const [filterType, setFilterType] = useState<string>('');
  const [filterStatus, setFilterStatus] = useState<string>('');
  const [searchQuery, setSearchQuery] = useState<string>('');
  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);
  const [isAllSelected, setIsAllSelected] = useState(false);
  const [showFilterDrawer, setShowFilterDrawer] = useState(false);
  const [showBulkActions, setShowBulkActions] = useState(false);
  const [confirmAction, setConfirmAction] = useState<{
    type: string;
    userId: string;
    status?: AccountStatus;
  } | null>(null);

  // Add state for action loading status
  const [isActionLoading, setIsActionLoading] = useState(false);
  const [actionFeedback, setActionFeedback] = useState<{
    type: 'success' | 'error';
    message: string;
    visible: boolean;
  } | null>(null);

  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10); // Default page size
  
  // Virtualization state
  const [virtualizedState, setVirtualizedState] = useState<{
    isVisible: boolean;
    hasRendered: boolean;
  }>({ isVisible: false, hasRendered: false });
  
  // Track if we're on a mobile device for responsive adjustments
  const [isMobile, setIsMobile] = useState(false);
  
  // Reference for the virtualized list container
  const virtualizedRef = useRef<HTMLDivElement>(null);
  
  // Performance tracking
  const perfRef = useRef(trackPerformance('AdminUsersPage'));

  // Prepare payload for the hook based on state
  const queryPayload = useMemo(
    () => ({
      page: currentPage,
      limit: pageSize,
      filter: searchQuery || undefined,
      status: filterStatus && filterStatus !== 'all' ? filterStatus : undefined,
    }), [currentPage, pageSize, searchQuery, filterStatus]);
    
  // Use the toast hook for notifications
  const { toast } = useToast();
  
  // Fetch users data with the useAllUsers hook
  const { data, isLoading, error, refetch } = useAllUsers(queryPayload);
  
  // Initialize the mutation hook for user activation
  const activateUserMutation = useAdminActivateUser();
  
  // Add sort configuration state
  const [sortConfig, setSortConfig] = useState<{ key: string; direction: 'asc' | 'desc' }>({ key: 'name', direction: 'asc' });
  
  // Calculate total user count
  const totalUserCount = useMemo(() => {
    return data?.totalCount || 0;
  }, [data]);
  
  // Function to check if the device is mobile based on screen width
  const checkMobile = useCallback(() => {
    setIsMobile(window.innerWidth < 768);
  }, []);
  
  // Handle mobile view and window resize
  useEffect(() => {
    // Initial check
    checkMobile();
    
    // Add resize listener
    window.addEventListener('resize', checkMobile);
    
    // Cleanup function to remove event listener
    return () => {
      window.removeEventListener('resize', checkMobile);
    };
  }, [checkMobile]);
  
  // Set virtualized list as visible after initial render
  const timer = setTimeout(() => {
    setVirtualizedState(prev => ({
      ...prev,
      isVisible: true
    }));
  }, 100);

  // Toggle select all users
  const toggleSelectAllOnPage = () => {
    if (isAllSelected) {
      setSelectedUsers(selectedUsers.filter(id => !usersToDisplay.some(u => u.id === id)));
    } else {
      const pageUserIds = usersToDisplay.map(user => user.id);
      setSelectedUsers([...Array.from(new Set([...selectedUsers, ...pageUserIds]))]);
    }
    setIsAllSelected(!isAllSelected);
  };
  
  // Message form state
  const [messageForm, setMessageForm] = useState<{
    subject: string;
    message: string;
  }>({
    subject: '',
    message: '',
  });
  
  // Handle message form changes
  const handleMessageFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setMessageForm(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  // Function to handle bulk actions on selected users
  const handleBulkAction = async (action: 'activate' | 'suspend' | 'deactivate' | 'message') => {
    if (selectedUsers.length === 0) {
      toast({
        title: 'No Users Selected',
        description: 'Please select at least one user to perform this action.',
        variant: 'warning',
      });
      return;
    }

    setIsActionLoading(true);

    try {
      // Perform the bulk action based on the action type
      switch (action) {
        case 'activate':
          // await callApi('bulkActivateUsers', { userIds: selectedUsers });
          toast({
            title: 'Users Activated',
            description: `Successfully activated ${selectedUsers.length} users.`,
            variant: 'success',
          });
          break;
        case 'suspend':
          // await callApi('bulkSuspendUsers', { userIds: selectedUsers });
          toast({
            title: 'Users Suspended',
            description: `Successfully suspended ${selectedUsers.length} users.`,
            variant: 'success',
          });
          break;
        case 'deactivate':
          // await callApi('bulkDeactivateUsers', { userIds: selectedUsers });
          toast({
            title: 'Users Deactivated',
            description: `Successfully deactivated ${selectedUsers.length} users.`,
            variant: 'success',
          });
          break;
        case 'message':
          setMessageForm(prev => ({
            ...prev,
            subject: '',
            message: '',
          }));
          setConfirmAction({
            type: 'message',
            userId: selectedUsers[0],
          });
          break;
        default:
          break;
      }

      // If not showing message modal, clear selection
      if (action !== 'message') {
        setSelectedUsers([]);
      }
    } catch (error) {
      console.error(`Error performing bulk action ${action}:`, error);
      toast({
        title: 'Error',
        description: `Failed to perform ${action} action on selected users.`,
        variant: 'destructive',
      });
    } finally {
      if (action !== 'message') {
        setIsActionLoading(false);
      }
    }
  };
  
  // Function to export users to CSV
  const handleExportUsers = () => {
    try {
      if (usersToDisplay.length === 0) {
        toast({
          title: 'No Users',
          description: 'There are no users to export.',
          variant: 'warning',
        });
        return;
      }

      // Create CSV content
      const headers = [
        'ID',
        'First Name',
        'Last Name',
        'Email',
        'User Type',
        'Account Status',
        'Phone Number',
        'Email Verified',
        'Phone Verified',
        'Last Login',
        'Created At',
      ];

      const csvContent = [
        headers.join(','),
        ...usersToDisplay.map(user => [
          user.id,
          user.firstName,
          user.lastName,
          user.email,
          user.userType,
          user.accountStatus,
          user.phoneNumber || '',
          user.emailVerified ? 'Yes' : 'No',
          user.phoneVerified ? 'Yes' : 'No',
          user.lastLogin ? formatDateTime(user.lastLogin) : 'Never',
          formatDateTime(user.createdAt),
        ].join(',')),
      ].join('\n');

      // Create a blob and download link
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.setAttribute('href', url);
      link.setAttribute('download', `users_export_${formatDate(new Date())}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      toast({
        title: 'Export Successful',
        description: `Exported ${usersToDisplay.length} users to CSV.`,
        variant: 'success',
      });
    } catch (error) {
      console.error('Error exporting users:', error);
      toast({
        title: 'Export Failed',
        description: 'Failed to export users. Please try again.',
        variant: 'destructive',
      });
    }
  };

  // Toggle select individual user
  const toggleSelectUser = (userId: string) => {
    if (selectedUsers.includes(userId)) {
      setSelectedUsers(selectedUsers.filter(id => id !== userId));
    } else {
      setSelectedUsers([...selectedUsers, userId]);
    }
  };

  // Reset filters
  const resetFilters = () => {
    setFilterType('');
    setFilterStatus('');
    setSearchQuery('');
  };

  // Add force refresh state
  const [refreshKey, setRefreshKey] = useState(0);

  // Convert updateUserStatus to useCallback to prevent unnecessary rerenders
  const updateUserStatus = useCallback(
    async (userId: string, status: AccountStatus, reason: string = '') => {
      setIsActionLoading(true);

      try {
        // Log the request for better debugging
        logInfo('Updating user status', { userId, status, reason });

        // Make the API call with correct parameters
        // Note: The enum values are already strings that match what the backend expects
        const result = await activateUserMutation.mutateAsync({
          userId,
          status,
          reason,
        });

        // Type-check the result
        if (
          typeof result === 'object' &&
          result !== null &&
          'success' in result &&
          !result.success
        ) {
          const errorMessage = 'error' in result ? result.error : 'Failed to update user status';
          throw new Error(errorMessage as string);
        }

        // Clear confirmation dialog
        setConfirmAction(null);

        // Refetch users to get updated data
        await refetch();

        // Force UI refresh by incrementing refresh key
        setRefreshKey(prevKey => prevKey + 1);

        // Show success feedback
        setActionFeedback({
          type: 'success',
          message: `User status updated to ${status}`,
          visible: true,
        });

        // Auto-hide feedback after 3 seconds
        setTimeout(() => {
          setActionFeedback(null);
        }, 3000);

        logInfo('User status updated successfully', { userId, status });
      } catch (err) {
        logError('Error updating user status', err);

        // Show error feedback
        setActionFeedback({
          type: 'error',
          message: err instanceof Error ? err.message : 'Failed to update user status',
          visible: true,
        });

        // Auto-hide feedback after 3 seconds
        setTimeout(() => {
          setActionFeedback(null);
        }, 3000);
      } finally {
        setIsActionLoading(false);
      }
    },
    [activateUserMutation, refetch]
  );

  // Simplified handler for direct status changes from dropdown
  const handleStatusChange = async (userId: string, status: AccountStatus) => {
    setIsActionLoading(true);

    try {
      logInfo('Status change triggered', { userId, status });

      // Show immediate feedback that action is in progress
      setActionFeedback({
        type: 'success',
        message: `Processing status change to ${status}...`,
        visible: true,
      });

      // Debug the account status format
      const statusAsString = status.toString();
      logInfo('Status value being sent to API', {
        status,
        statusAsString,
        statusType: typeof status,
        accountStatusEnum: AccountStatus,
      });

      // Call the updateUserStatus function with the status and a reason
      await updateUserStatus(userId, status, `Status changed to ${status} from dropdown`);

      // Update feedback to show success
      setActionFeedback({
        type: 'success',
        message: `User status successfully updated to ${status}`,
        visible: true,
      });

      setActiveDropdown(null);

      // Force UI refresh to show updated status
      setRefreshKey(prevKey => prevKey + 1);

      // Auto-hide feedback after 3 seconds
      setTimeout(() => {
        setActionFeedback(null);
      }, 3000);
    } catch (error) {
      logError('Failed to change user status', error);

      // Show error feedback
      setActionFeedback({
        type: 'error',
        message: error instanceof Error ? error.message : 'Failed to update user status',
        visible: true,
      });

      // Auto-hide feedback after 3 seconds
      setTimeout(() => {
        setActionFeedback(null);
      }, 3000);
    } finally {
      setIsActionLoading(false);
    }
  };

  // This function was removed as it was a duplicate of the handleBulkAction function above

  // Memoize the filtered users for export to prevent recomputation on every render
  const usersToExport = useMemo(() => {
    return selectedUsers.length > 0
      ? usersToDisplay.filter(user => selectedUsers.includes(user.id))
      : usersToDisplay;
  }, [selectedUsers, usersToDisplay]);
  

  // Export users as CSV
  const exportUsers = useCallback(() => {
    // Create CSV header
    const headers = [
      'First Name',
      'Last Name',
      'Email',
      'User Type',
      'Status',
      'Created At',
      'Last Login',
    ];

    // Create CSV content
    const csvContent = [
      headers.join(','),
      ...usersToExport.map(user =>
        [
          user.firstName,
          user.lastName,
          user.email,
          user.userType,
          user.accountStatus,
          user.createdAt,
          user.lastLogin || '',
        ].join(',')
      ),
    ].join('\n');

    // Create a Blob and download link
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.setAttribute('href', url);
    link.setAttribute('download', `users_export_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }, [usersToExport]);

  // Update selected status when filtered list changes
  useEffect(() => {
    if (usersToDisplay.length > 0 && selectedUsers.length === usersToDisplay.length) {
      setIsAllSelected(true);
    } else {
      setIsAllSelected(false);
    }
  }, [usersToDisplay.length, selectedUsers.length]);
  
  // Ensure all users have the required properties for the User type
  const processedUsers = useMemo(() => {
    if (!data?.users) return [];
    
    return data.users.map(user => ({
      ...user,
      id: user.id || '',
      accountStatus: user.accountStatus || AccountStatus.ACTIVE,
      lastLogin: user.lastLogin || null
    })) as User[];
  }, [data?.users]);
  
  // Process the data to get users to display
  const usersToDisplay = useMemo(() => {
    return processedUsers
      .filter(user => {
        if (filterType && user.userType !== filterType) return false;
        if (filterStatus && user.accountStatus !== filterStatus) return false;
        if (searchQuery) {
          const query = searchQuery.toLowerCase();
          return (
            user.firstName.toLowerCase().includes(query) ||
            user.lastName.toLowerCase().includes(query) ||
            (user.email && user.email.toLowerCase().includes(query))
          );
        }
        return true;
      })
      .sort((a, b) => {
        if (sortConfig.key === 'name') {
          return sortConfig.direction === 'asc'
            ? a.firstName.localeCompare(b.firstName)
            : b.firstName.localeCompare(a.firstName);
        }
        if (sortConfig.key === 'email') {
          return sortConfig.direction === 'asc'
            ? (a.email || '').localeCompare(b.email || '')
            : (b.email || '').localeCompare(a.email || '');
        }
        if (sortConfig.key === 'userType') {
          return sortConfig.direction === 'asc'
            ? a.userType.localeCompare(b.userType)
            : b.userType.localeCompare(a.userType);
        }
        if (sortConfig.key === 'status') {
          return sortConfig.direction === 'asc'
            ? a.accountStatus.localeCompare(b.accountStatus)
            : b.accountStatus.localeCompare(a.accountStatus);
        }
        return 0;
      });
  }, [processedUsers, filterType, filterStatus, searchQuery, sortConfig]);

  useEffect(() => {
    logInfo('admin-users rendered (with real data)');

    if (data?.success) {
      try {
        // Ensure we have all necessary user data
        if (data.users && data.users.length > 0) {
          // Log the first user for debugging
          logInfo('Sample user data', {
            user: {
              id: data.users[0].id,
              name: `${data.users[0].firstName} ${data.users[0].lastName}`,
              email: data.users[0].email,
              userType: data.users[0].userType,
            },
          });
        }

        logValidation('4.10', 'success', 'Admin users connected to real data via local API.');

        // Track when items are rendered in the virtualized list
        const handleItemsRendered = useCallback((info: {
          overscanStartIndex: number;
          overscanStopIndex: number;
          visibleStartIndex: number;
          visibleStopIndex: number;
        }) => {
          if (usersToDisplay.length > 50) {
            logInfo('VirtualizedList items rendered', {
              visibleRange: `${info.visibleStartIndex}-${info.visibleStopIndex}`,
              overscanRange: `${info.overscanStartIndex}-${info.overscanStopIndex}`,
              visibleCount: info.visibleStopIndex - info.visibleStartIndex + 1,
              totalItems: usersToDisplay.length
            });
          }
        }, [usersToDisplay.length]);
      } catch (e) {
        console.error('Could not log validation', e);
      }
    }
  }, [data]);

  // Update show bulk actions based on selections
  useEffect(() => {
    setShowBulkActions(selectedUsers.length > 0);
  }, [selectedUsers]);

  // Add new state for dropdown menus
  const [activeDropdown, setActiveDropdown] = useState<string | null>(null);
  const dropdownRef = useRef<HTMLDivElement>(null);

  // Close dropdown when clicking outside
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      // Only close if we have an active dropdown
      if (
        activeDropdown &&
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node)
      ) {
        setActiveDropdown(null);
      }
    }

    // Add event listener only when we have an active dropdown
    if (activeDropdown) {
      document.addEventListener('mousedown', handleClickOutside);
      return () => {
        document.removeEventListener('mousedown', handleClickOutside);
      };
    }
    return undefined;
  }, [activeDropdown, dropdownRef]);

  // Toggle dropdown menu for a user
  const toggleDropdown = (userId: string) => {
    // If clicking the same dropdown, close it
    if (activeDropdown === userId) {
      setActiveDropdown(null);
    } else {
      // Otherwise open the clicked dropdown (and close any other open dropdown)
      setActiveDropdown(userId);
    }
  };

  // Handle actions directly from the dropdown menu
  const handleDropdownAction = (action: string, userId: string, e?: React.MouseEvent) => {
    // Stop event propagation if event is passed
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }

    // Add detailed logging
    logInfo('Dropdown action clicked', { action, userId });

    // Close the dropdown after action is selected
    setActiveDropdown(null);

    // Handle different actions
    switch (action) {
      case 'view':
        // Use router instead of window.location for better Next.js integration
        logInfo(`Viewing user details for ${userId}`);
        window.location.href = `/admin/users/${userId}`;
        break;
      case 'edit':
        logInfo(`Editing user ${userId}`);
        window.location.href = `/admin/users/${userId}/edit`;
        break;
      case 'reset-password':
        logInfo(`Opening reset password modal for user ${userId}`);
        setConfirmAction({
          type: 'password',
          userId: userId,
        });
        break;
      case 'send-message':
        logInfo(`Opening message modal for user ${userId}`);
        setConfirmAction({
          type: 'message',
          userId: userId,
        });
        break;
      case 'activate':
        logInfo(`Activating user ${userId}`);
        handleStatusChange(userId, AccountStatus.ACTIVE);
        break;
      case 'suspend':
        logInfo(`Suspending user ${userId}`);
        handleStatusChange(userId, AccountStatus.SUSPENDED);
        break;
      case 'deactivate':
        logInfo(`Opening deactivation confirmation for user ${userId}`);
        setConfirmAction({
          type: 'deactivate',
          userId: userId,
        });
        break;
      default:
        logError(`Unknown action: ${action}`);
        break;
    }
  };

  // Message form state is defined above

  // Add handler for message form submission
  const handleSendMessage = async (e: FormEvent) => {
    e.preventDefault();

    if (!confirmAction || confirmAction.type !== 'message') return;
    if (!messageForm.subject || !messageForm.message) return;

    setIsActionLoading(true);

    try {
      // In a real app, this would be an API call
      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API delay

      logInfo('Message sent to user', {
        userId: confirmAction.userId,
        subject: messageForm.subject,
        message: messageForm.message,
      });

      // Reset form
      setMessageForm({ subject: '', message: '' });
      setConfirmAction(null);

      // Show success feedback
      setActionFeedback({
        type: 'success',
        message: 'Message sent successfully',
        visible: true,
      });

      // Auto-hide feedback after 3 seconds
      setTimeout(() => {
        setActionFeedback(null);
      }, 3000);
    } catch (err) {
      logError('Error sending message', err);

      // Show error feedback
      setActionFeedback({
        type: 'error',
        message: err instanceof Error ? err.message : 'Failed to send message',
        visible: true,
      });

      // Auto-hide feedback after 3 seconds
      setTimeout(() => {
        setActionFeedback(null);
      }, 3000);
    } finally {
      setIsActionLoading(false);
    }
  };

  // Add handler for password reset
  const handlePasswordReset = async (userId: string) => {
    setIsActionLoading(true);

    try {
      // In a real app, this would call an API endpoint to trigger password reset
      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API delay

      logInfo('Password reset requested', { userId });

      // Clear confirmation dialog
      setConfirmAction(null);

      // Show success feedback
      setActionFeedback({
        type: 'success',
        message: 'Password reset link sent successfully',
        visible: true,
      });

      // Auto-hide feedback after 3 seconds
      setTimeout(() => {
        setActionFeedback(null);
      }, 3000);
    } catch (err) {
      logError('Error resetting password', err);

      // Show error feedback
      setActionFeedback({
        type: 'error',
        message: err instanceof Error ? err.message : 'Failed to reset password',
        visible: true,
      });

      // Auto-hide feedback after 3 seconds
      setTimeout(() => {
        setActionFeedback(null);
      }, 3000);
    } finally {
      setIsActionLoading(false);
    }
  };

  // Make sure the UI updates when refreshKey changes
  useEffect(() => {
    if (refreshKey > 0) {
      refetch();
    }
  }, [refreshKey, refetch]);

  return (
    <div className="space-y-8">
      {/* Action feedback toast notification */}
      {actionFeedback && actionFeedback.visible && (
        <div
          className={`fixed top-4 right-4 z-50 p-4 rounded-md shadow-lg ${
            actionFeedback.type === 'success'
              ? 'bg-green-100 border border-green-200 text-green-800'
              : 'bg-red-100 border border-red-200 text-red-800'
          } animate-fadeIn`}
        >
          <div className="flex items-center">
            {actionFeedback.type === 'success' ? (
              <Check className="h-5 w-5 mr-2" />
            ) : (
              <AlertTriangle className="h-5 w-5 mr-2" />
            )}
            <p>{actionFeedback.message}</p>
          </div>
        </div>
      )}

      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <h1 className="text-2xl font-semibold dark:text-white">User Management</h1>

        <div className="flex gap-2">
          <Link href="/admin/users/create">
            <Button>
              <UserPlus className="h-4 w-4 mr-2" />
              Create User
            </Button>
          </Link>
        </div>
      </div>

      {/* Search & Filter Toolbar */}
      <Card className="p-4 mb-6">
        <div className="flex flex-col space-y-4">
          <div className="flex flex-wrap gap-3">
            <div className="relative flex-1 min-w-[250px]">
              <Input
                placeholder="Search by name or email…"
                className="pl-10"
                value={searchQuery}
                onChange={e => setSearchQuery(e.target.value)}
              />
              <div className="absolute left-3 top-1/2 -translate-y-1/2 text-slate-400">
                <Search className="h-4 w-4" />
              </div>
              {searchQuery && (
                <button
                  className="absolute right-3 top-1/2 -translate-y-1/2 text-slate-400 hover:text-slate-600"
                  onClick={() => setSearchQuery('')}
                  title="Clear search"
                >
                  <ChevronDown className="h-4 w-4 rotate-45" />
                </button>
              )}
            </div>

            <Button
              variant={showFilterDrawer ? 'primary' : 'outline'}
              size="md"
              onClick={() => setShowFilterDrawer(!showFilterDrawer)}
              className="flex items-center"
            >
              <Filter className="h-4 w-4 mr-2" />
              Filters
              {(filterType || filterStatus) && (
                <span className="ml-2 bg-primary-100 text-primary-800 text-xs font-medium rounded-full px-2 py-0.5">
                  {(filterType ? 1 : 0) + (filterStatus ? 1 : 0)}
                </span>
              )}
            </Button>

            <Button variant="outline" onClick={exportUsers} title="Export Users as CSV">
              <Download className="h-4 w-4 mr-2" />
              Export
            </Button>

            <Link href="/admin/users/create" className="ml-auto">
              <Button className="whitespace-nowrap">
                <UserPlus className="h-4 w-4 mr-2" />
                Create User
              </Button>
            </Link>
          </div>

          {showFilterDrawer && (
            <div className="bg-slate-50 dark:bg-slate-800 p-4 rounded-md border border-slate-200 dark:border-slate-700 shadow-sm animate-fadeIn">
              <div className="flex flex-wrap gap-4">
                <div className="min-w-[200px]">
                  <label className="block text-sm font-medium mb-1 text-slate-700 dark:text-slate-300">
                    User Type
                  </label>
                  <Select
                    className="w-full"
                    value={filterType}
                    onChange={e => setFilterType(e.target.value)}
                  >
                    <option value="">All Types</option>
                    <option value="patient">Patients</option>
                    <option value="doctor">Doctors</option>
                    <option value="admin">Admins</option>
                  </Select>
                </div>

                <div className="min-w-[200px]">
                  <label className="block text-sm font-medium mb-1 text-slate-700 dark:text-slate-300">
                    Account Status
                  </label>
                  <Select
                    className="w-full"
                    value={filterStatus}
                    onChange={e => setFilterStatus(e.target.value)}
                  >
                    <option value="">All Statuses</option>
                    <option value="active">Active Only</option>
                    <option value="suspended">Suspended Only</option>
                    <option value="deactivated">Deactivated Only</option>
                  </Select>
                </div>

                <div className="flex items-end">
                  <Button variant="outline" size="sm" onClick={resetFilters} title="Reset Filters">
                    <RotateCw className="h-4 w-4 mr-2" />
                    Reset Filters
                  </Button>
                </div>
              </div>
            </div>
          )}
        </div>
      </Card>

      <Card className="p-4">
        {/* Bulk Actions Bar */}
        {showBulkActions && (
          <div className="bg-slate-50 dark:bg-slate-800 p-3 rounded mb-4 border border-slate-200 dark:border-slate-700 flex flex-wrap justify-between items-center gap-3">
            <div className="flex flex-wrap items-center gap-2">
              <span className="text-sm font-medium mr-3">
                {selectedUsers.length} {selectedUsers.length === 1 ? 'user' : 'users'} selected
              </span>
              <Button
                size="sm"
                variant="primary"
                onClick={() => handleBulkAction('activate')}
                className="flex items-center"
                title="Activate selected users"
              >
                <Check className="h-4 w-4 mr-2" />
                Activate
              </Button>
              <Button
                size="sm"
                variant="secondary"
                onClick={() => handleBulkAction('suspend')}
                className="flex items-center"
                title="Suspend selected users"
              >
                <Ban className="h-4 w-4 mr-2" />
                Suspend
              </Button>
              <Button
                size="sm"
                variant="danger"
                onClick={() => handleBulkAction('deactivate')}
                className="flex items-center"
                title="Deactivate selected users"
              >
                <Trash2 className="h-4 w-4 mr-2" />
                Deactivate
              </Button>
              <Button
                size="sm"
                variant="outline"
                onClick={() => setSelectedUsers([])}
                className="flex items-center"
                title="Clear selection"
              >
                Clear
              </Button>
            </div>
            <div>
              <Button size="sm" variant="secondary" onClick={() => setShowBulkActions(false)}>
                Cancel
              </Button>
            </div>
          </div>
        )}

        {/* User Table Header */}
        <div className="overflow-hidden">
          <div className="bg-slate-50 dark:bg-slate-800 flex items-center px-4 py-3 border-b border-slate-200 dark:border-slate-700">
            <div className="w-8 flex-shrink-0">
              <input
                type="checkbox"
                className="rounded text-primary-600 focus:ring-primary-500"
                checked={isAllSelected}
                onChange={toggleSelectAllOnPage}
                aria-label="Select all users"
              />
            </div>
            <div className="flex-grow flex items-center">
              <div className="w-1/4 text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider text-left">Name</div>
              <div className="w-1/4 text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider text-left">Email</div>
              <div className="w-1/6 text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider text-left">Type</div>
              <div className="w-1/6 text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider text-left">Status</div>
              <div className="w-1/6 text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider text-left">Last Login</div>
            </div>
            <div className="flex-shrink-0 w-12">
              <span className="sr-only">Actions</span>
            </div>
          </div>
          
          {/* Loading State */}
          {isLoading && (
            <div className="flex justify-center items-center py-12">
              <Spinner className="mx-auto" />
              <span className="ml-2 text-slate-500">Loading users...</span>
            </div>
          )}
          
          {/* Error State */}
          {!isLoading && error && (
            <div className="px-4 py-8 text-center">
              <Alert variant="error" className="inline-flex">
                {error instanceof Error ? error.message : String(error)}
              </Alert>
            </div>
          )}
          
          {/* Empty State */}
          {!isLoading && !error && usersToDisplay.length === 0 && (
            <div className="px-4 py-12 text-center">
              <Filter className="h-12 w-12 mx-auto mb-4 text-slate-400" />
              <p className="text-slate-500 mb-4">No users found matching your criteria.</p>
              <Button variant="outline" onClick={resetFilters}>Clear Filters</Button>
            </div>
          )}
          
          {/* Virtualized User List */}
          {!isLoading && !error && usersToDisplay.length > 0 && (
            <div 
              ref={virtualizedRef}
              className="overflow-auto max-h-[600px]"
              aria-label={`Users list containing ${usersToDisplay.length} users`}
            >
              {/* Show a loading state until the virtualized list is visible */}
              {!virtualizedState.isVisible ? (
                <div className="flex justify-center items-center py-12">
                  <Spinner className="mx-auto" />
                  <span className="ml-2 text-slate-500">Loading users list...</span>
                </div>
              ) : (
                <>
                  {isMobile ? (
                    // Mobile view - cards
                    <div className="space-y-3">
                      {usersToDisplay.map(user => (
                        <div 
                          key={user.id}
                          className="bg-white dark:bg-slate-800 p-4 rounded-md border border-slate-200 dark:border-slate-700 shadow-sm"
                        >
                          <div className="flex justify-between items-start mb-2">
                            <div>
                              <h3 className="font-medium text-slate-900 dark:text-white">
                                {user.firstName} {user.lastName}
                              </h3>
                              <p className="text-sm text-slate-600 dark:text-slate-300">
                                {user.email}
                              </p>
                            </div>
                            <div className="flex items-center">
                              <input
                                type="checkbox"
                                className="rounded text-primary-600 focus:ring-primary-500 mr-2"
                                checked={selectedUsers.includes(user.id)}
                                onChange={() => toggleSelectUser(user.id)}
                                aria-label={`Select ${user.firstName} ${user.lastName}`}
                              />
                              <div className="relative">
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => setActiveDropdown(activeDropdown === user.id ? null : user.id)}
                                  aria-label="User actions"
                                  className="rounded-full p-2"
                                  disabled={isActionLoading}
                                >
                                  <MoreVertical className="h-4 w-4" />
                                </Button>
                                
                                {activeDropdown === user.id && (
                                  <div className="absolute right-0 mt-2 w-48 bg-white dark:bg-slate-800 rounded-md shadow-lg z-10 border border-slate-200 dark:border-slate-700">
                                    <div className="py-1">
                                      <Link
                                        href={`/admin/users/${user.id}`}
                                        className="flex items-center px-4 py-2 text-sm text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700"
                                      >
                                        <Eye className="h-4 w-4 mr-2" />
                                        View Details
                                      </Link>
                                      
                                      {user.accountStatus !== AccountStatus.ACTIVE && (
                                        <button
                                          onClick={() => handleStatusChange(user.id, AccountStatus.ACTIVE)}
                                          className="w-full flex items-center px-4 py-2 text-sm text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700"
                                          disabled={isActionLoading}
                                        >
                                          <Check className="h-4 w-4 mr-2 text-green-500" />
                                          Activate
                                        </button>
                                      )}
                                      
                                      {user.accountStatus !== AccountStatus.SUSPENDED && (
                                        <button
                                          onClick={() => handleStatusChange(user.id, AccountStatus.SUSPENDED)}
                                          className="w-full flex items-center px-4 py-2 text-sm text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700"
                                          disabled={isActionLoading}
                                        >
                                          <AlertTriangle className="h-4 w-4 mr-2 text-amber-500" />
                                          Suspend
                                        </button>
                                      )}
                                      
                                      {user.accountStatus !== AccountStatus.DEACTIVATED && (
                                        <button
                                          onClick={() => handleStatusChange(user.id, AccountStatus.DEACTIVATED)}
                                          className="w-full flex items-center px-4 py-2 text-sm text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700"
                                          disabled={isActionLoading}
                                        >
                                          <Ban className="h-4 w-4 mr-2 text-red-500" />
                                          Deactivate
                                        </button>
                                      )}
                                    </div>
                                  </div>
                                )}
                              </div>
                            </div>
                          </div>
                          
                          <div className="flex flex-wrap gap-2 mt-2">
                            <Badge
                              variant={
                                user.userType === UserType.ADMIN
                                  ? 'warning'
                                  : user.userType === UserType.DOCTOR
                                    ? 'success'
                                    : 'primary'
                              }
                              className="capitalize"
                            >
                              {user.userType}
                            </Badge>
                            
                            <Badge
                              variant={
                                user.accountStatus === AccountStatus.ACTIVE
                                  ? 'success'
                                  : user.accountStatus === AccountStatus.SUSPENDED
                                    ? 'warning'
                                    : 'danger'
                              }
                              className="capitalize px-3 py-1 text-sm font-medium shadow-sm"
                            >
                              {user.accountStatus}
                            </Badge>
                          </div>
                          
                          <div className="mt-2 text-xs text-slate-500 dark:text-slate-400">
                            Last login: {user.lastLogin ? formatDateTime(user.lastLogin) : 'Never'}
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    // Desktop view - table rows
                    <VirtualizedList
                      data={usersToDisplay}
                      height={600}
                      itemHeight={60}
                      renderRow={({ item: user, index }) => (
                        <UserRow
                          key={user.id}
                          user={user}
                          selectedUsers={selectedUsers}
                          toggleSelectUser={toggleSelectUser}
                          activeDropdown={activeDropdown}
                          setActiveDropdown={setActiveDropdown}
                          handleStatusChange={handleStatusChange}
                          isActionLoading={isActionLoading}
                        />
                      )}
                    />
                  )}
                </>
              )}
            </div>
          </div>

        {/* Footer with stats */}
        {!isLoading && !error && (
          <div className="mt-4 pt-4 border-t border-slate-200 dark:border-slate-700">
            <div className="flex flex-wrap justify-between items-center gap-4">
              <div className="text-sm text-slate-500 dark:text-slate-400">
                Showing{' '}
                <span className="font-medium text-slate-700 dark:text-slate-300">
                  {usersToDisplay.length}
                </span>{' '}
                of{' '}
                <span className="font-medium text-slate-700 dark:text-slate-300">
                  {totalUserCount}
                </span>{' '}
                total users
              </div>

              <div className="flex flex-wrap gap-4 sm:gap-6">
                <div className="flex items-center">
                  <div className="w-3 h-3 rounded-full bg-primary mr-2"></div>
                  <span className="text-sm text-slate-600 dark:text-slate-300">
                    Patients:{' '}
                    <span className="font-medium">
                      {usersToDisplay.filter(u => u.userType === UserType.PATIENT).length}
                    </span>
                  </span>
                </div>
                <div className="flex items-center">
                  <div className="w-3 h-3 rounded-full bg-success mr-2"></div>
                  <span className="text-sm text-slate-600 dark:text-slate-300">
                    Doctors:{' '}
                    <span className="font-medium">
                      {usersToDisplay.filter(u => u.userType === UserType.DOCTOR).length}
                    </span>
                  </span>
                </div>
                <div className="flex items-center">
                  <div className="w-3 h-3 rounded-full bg-warning mr-2"></div>
                  <span className="text-sm text-slate-600 dark:text-slate-300">
                    Admins:{' '}
                    <span className="font-medium">
                      {usersToDisplay.filter(u => u.userType === UserType.ADMIN).length}
                    </span>
                  </span>
                </div>
              </div>
            </div>

            <div className="mt-4 grid grid-cols-1 sm:grid-cols-3 gap-4">
              <div className="bg-green-50 dark:bg-green-900/20 p-3 rounded-md border border-green-100 dark:border-green-900/30 transition-all duration-300">
                <div className="text-xs uppercase text-green-700 dark:text-green-400 font-semibold mb-1">
                  Active Users
                </div>
                <div className="text-2xl font-bold text-green-800 dark:text-green-300">
                  {usersToDisplay.filter(u => u.accountStatus === AccountStatus.ACTIVE).length}
                </div>
                <div className="text-xs text-green-600 dark:text-green-500 mt-1">
                  {Math.round(
                    (usersToDisplay.filter(u => u.accountStatus === AccountStatus.ACTIVE).length /
                      usersToDisplay.length) *
                      100
                  )}
                  % of total
                </div>
              </div>

              <div className="bg-orange-50 dark:bg-orange-900/20 p-3 rounded-md border border-orange-100 dark:border-orange-900/30 transition-all duration-300">
                <div className="text-xs uppercase text-orange-700 dark:text-orange-400 font-semibold mb-1">
                  Suspended Users
                </div>
                <div className="text-2xl font-bold text-orange-800 dark:text-orange-300">
                  {usersToDisplay.filter(u => u.accountStatus === AccountStatus.SUSPENDED).length}
                </div>
                <div className="text-xs text-orange-600 dark:text-orange-500 mt-1">
                  {Math.round(
                    (usersToDisplay.filter(u => u.accountStatus === AccountStatus.SUSPENDED)
                      .length /
                      usersToDisplay.length) *
                      100
                  )}
                  % of total
                </div>
              </div>

              <div className="bg-red-50 dark:bg-red-900/20 p-3 rounded-md border border-red-100 dark:border-red-900/30 transition-all duration-300">
                <div className="text-xs uppercase text-red-700 dark:text-red-400 font-semibold mb-1">
                  Deactivated Users
                </div>
                <div className="text-2xl font-bold text-red-800 dark:text-red-300">
                  {usersToDisplay.filter(u => u.accountStatus === AccountStatus.DEACTIVATED).length}
                </div>
                <div className="text-xs text-red-600 dark:text-red-500 mt-1">
                  {Math.round(
                    (usersToDisplay.filter(u => u.accountStatus === AccountStatus.DEACTIVATED)
                      .length /
                      usersToDisplay.length) *
                      100
                  )}
                  % of total
                </div>
              </div>
            </div>
          </div>
        )}
      </Card>

      {/* Status Change Confirmation Modal */}
      {confirmAction?.type === 'status' && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-slate-800 rounded-lg shadow-lg max-w-md w-full p-6">
            <h3 className="text-lg font-semibold mb-4">Change User Status</h3>
            <p className="mb-4">Select the new status for this user:</p>
            <div className="space-y-2 mb-6">
              <Button
                variant="primary"
                className="w-full justify-center"
                onClick={() => updateUserStatus(confirmAction.userId, AccountStatus.ACTIVE)}
              >
                <CheckSquare className="h-4 w-4 mr-2" />
                Activate Account
              </Button>
              <Button
                variant="secondary"
                className="w-full justify-center"
                onClick={() => updateUserStatus(confirmAction.userId, AccountStatus.SUSPENDED)}
              >
                <RotateCw className="h-4 w-4 mr-2" />
                Suspend Account
              </Button>
              <Button
                variant="danger"
                className="w-full justify-center"
                onClick={() => updateUserStatus(confirmAction.userId, AccountStatus.DEACTIVATED)}
              >
                <Trash2 className="h-4 w-4 mr-2" />
                Deactivate Account
              </Button>
            </div>
            <div className="flex justify-end">
              <Button variant="outline" onClick={() => setConfirmAction(null)}>
                Cancel
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Password Reset Confirmation Modal */}
      {confirmAction?.type === 'password' && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-slate-800 rounded-lg shadow-lg max-w-md w-full p-6">
            <h3 className="text-lg font-semibold mb-4">Reset Password</h3>
            <p className="mb-6">
              This will send a password reset link to the user's email address. Continue?
            </p>
            <div className="flex justify-end space-x-3">
              <Button variant="outline" onClick={() => setConfirmAction(null)}>
                Cancel
              </Button>
              <Button
                variant="primary"
                onClick={() => handlePasswordReset(confirmAction.userId)}
                isLoading={isActionLoading}
              >
                <Mail className="h-4 w-4 mr-2" />
                Send Reset Link
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Deactivation Confirmation Modal */}
      {confirmAction?.type === 'deactivate' && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-slate-800 rounded-lg shadow-lg max-w-md w-full p-6">
            <h3 className="text-lg font-semibold mb-4 text-danger">Confirm Account Deactivation</h3>
            <p className="mb-4">
              Are you sure you want to deactivate this user account? This action:
            </p>
            <ul className="list-disc pl-5 mb-6 space-y-1 text-sm">
              <li>Will prevent the user from logging in</li>
              <li>Will cancel all their pending appointments</li>
              <li>Can be reversed later by an administrator</li>
            </ul>
            <div className="flex justify-end space-x-3">
              <Button variant="outline" onClick={() => setConfirmAction(null)}>
                Cancel
              </Button>
              <Button
                variant="danger"
                onClick={() => {
                  updateUserStatus(
                    confirmAction.userId,
                    AccountStatus.DEACTIVATED,
                    'Admin deactivation'
                  );
                }}
                isLoading={isActionLoading}
              >
                <Trash2 className="h-4 w-4 mr-2" />
                Deactivate Account
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Message User Modal */}
      {confirmAction?.type === 'message' && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-slate-800 rounded-lg shadow-lg max-w-md w-full p-6">
            <h3 className="text-lg font-semibold mb-4">Send Message to User</h3>
            <form onSubmit={handleSendMessage}>
              <div className="mb-4">
                <label className="block text-sm font-medium mb-1">Subject</label>
                <Input
                  name="subject"
                  placeholder="Enter message subject..."
                  className="w-full"
                  value={messageForm.subject}
                  onChange={handleMessageFormChange}
                  required
                />
              </div>
              <div className="mb-6">
                <label className="block text-sm font-medium mb-1">Message</label>
                <textarea
                  name="message"
                  className="w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary/60 dark:bg-slate-700 dark:text-white"
                  rows={4}
                  placeholder="Enter your message..."
                  value={messageForm.message}
                  onChange={handleMessageFormChange}
                  required
                ></textarea>
              </div>
              <div className="flex justify-end space-x-3">
                <Button type="button" variant="outline" onClick={() => setConfirmAction(null)}>
                  Cancel
                </Button>
                <Button type="submit" variant="primary" isLoading={isActionLoading}>
                  <Mail className="h-4 w-4 mr-2" />
                  Send Message
                </Button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Add status change animation styles */}
      <style jsx global>{`
        @keyframes fadeIn {
          from {
            opacity: 0;
            transform: translateY(-10px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }

        .animate-fadeIn {
          animation: fadeIn 0.3s ease-out forwards;
        }

        @keyframes highlight {
          0% {
            background-color: transparent;
          }
          50% {
            background-color: rgba(99, 102, 241, 0.1);
          }
          100% {
            background-color: transparent;
          }
        }

        .animate-highlight {
          animation: highlight 2s ease-in-out;
        }

        .badge-pulse {
          animation: pulse 2s infinite;
        }

        @keyframes pulse {
          0% {
            box-shadow: 0 0 0 0 rgba(99, 102, 241, 0.4);
          }
          70% {
            box-shadow: 0 0 0 6px rgba(99, 102, 241, 0);
          }
          100% {
            box-shadow: 0 0 0 0 rgba(99, 102, 241, 0);
          }
        }
      `}</style>
    </div>
  );
}
